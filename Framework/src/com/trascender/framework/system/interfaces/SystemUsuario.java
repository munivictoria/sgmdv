/*
 * Generated by XDoclet - Do not edit!
 */
package com.trascender.framework.system.interfaces;

import javax.ejb.Remote;

import com.trascender.framework.recurso.filtros.FiltroUsuario;
import com.trascender.framework.exception.TrascenderFrameworkException;
import com.trascender.framework.recurso.persistent.Usuario;
import com.trascender.framework.recurso.transients.Recurso;

/**
 * Remote interface for SystemUsuario.
 */
@Remote
public interface SystemUsuario {
	
	public static final String JNDI_NAME = "ejb/SystemUsuario/remote";
	
   /**
    * Business method
    */
   public void addUsuario( com.trascender.framework.recurso.persistent.Usuario pUsuario )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    */
   public void updateUsuario( com.trascender.framework.recurso.persistent.Usuario pUsuario )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    */
   public void removeUsuario( com.trascender.framework.recurso.persistent.Usuario pUsuario )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    */
   public void restoreUsuario( com.trascender.framework.recurso.persistent.Usuario pUsuario )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pUser nombre de usuario
    * @param pPassword clave del usuario
    * @param pEstado estado en que se encuentra el usuario
    * @param pPersonaFisica filtra los usuarios de una persona fisica    */
   public FiltroUsuario findUsuario(FiltroUsuario pFiltro )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Ingresa al usuario al sistema
    * @param pUser
    * @param pPassword
    * @param pRemoteAddress
    * @param pRemotePort
    * @param pRemoteHost
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException
    */
   public long login( java.lang.String pUser,java.lang.String pPassword,java.lang.String pRemoteAddress,java.lang.String pRemotePort,java.lang.String pRemoteHost )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Registra un usuario
    * @return llave del sistema
    */
   public long login( java.lang.String pUser,java.lang.String pPassword )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    */
   public void setLlave( long pLlave )
      throws java.rmi.RemoteException;

   /**
    * Business method
    */
   public void logout( long pKey )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   public void logout(  )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Trae todos los permisos del usuario actual una vez seteada la llave.
    * @throws TrascenderFrameworkException cuando la llave ha caducado
    */
   public java.util.List getListaPermisos(  )
      throws com.trascender.framework.exception.TrascenderFrameworkException, java.rmi.RemoteException;

   public Recurso getRecursoPorId(Long pIdRecurso)	throws TrascenderFrameworkException;
	
   /**
    * Obtiene la lista de grupos completa. debe tener permiso para ver los grupos y recursos.
    * @return Lista de recusos completa
    * @throws TrascenderFrameworkException
    */
   public java.util.List getListaGruposRecursos(  )
      throws com.trascender.framework.exception.TrascenderFrameworkException, java.rmi.RemoteException;

   /**
    * Recupera un usuario por id
    * @param pId número de identificación del usuario
    * @return usaurio que pertenece a ese id, nulo en caso que no exista ninguno
    */
   public com.trascender.framework.recurso.persistent.Usuario getUsuarioPorId( long pId )
      throws java.lang.Exception, java.rmi.RemoteException;

   /**
    * Business method
    */
   public com.trascender.framework.recurso.persistent.Usuario findUsuarioPorLlave( long pKey )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   public void cambiarClave( java.lang.String pClaveVieja,java.lang.String pClaveNueva )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Genera una firma del usuario actual
    * @param pComentario comentario para la firma
    * @return 
    */
   public com.trascender.framework.recurso.persistent.FirmaPermiso firmar( java.lang.String pComentario )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

}
