/*
 * Generated by XDoclet - Do not edit!
 */
package com.trascender.framework.system.interfaces;

import javax.ejb.Remote;

import com.trascender.framework.exception.TrascenderException;
import com.trascender.framework.recurso.filtros.FiltroRol;

/**
 * Remote interface for SystemRol.
 */
@Remote
public interface SystemRol {
	
	public static final String JNDI_NAME = "ejb/SystemRol/remote";
	
   /**
    * Business method
    */
   public void addRol( com.trascender.framework.recurso.persistent.Rol pRol )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    */
   public void updateRol( com.trascender.framework.recurso.persistent.Rol pRol )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    */
   public void removeRol( com.trascender.framework.recurso.persistent.Rol pRol )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    */
   public void restoreRol( com.trascender.framework.recurso.persistent.Rol pRol )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Recupera un listado de roles
    * @param pNombre primeras letras del nombre del rol
    * @param pDesde
    * @param pHasta
    * @param pFirma si puede realizar firma o no
    * @param pArea area a la que pertenece el rol
    */
   public FiltroRol findRol(FiltroRol pFiltro) throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    */
   public void setLlave( long pLlave )
      throws java.rmi.RemoteException;

   /**
    * Business method
    */
   public java.util.Set getListaPermisos( com.trascender.framework.recurso.persistent.Rol pRol )
      throws com.trascender.framework.exception.TrascenderFrameworkException, java.rmi.RemoteException;

   /**
    * Recupera un rol por el id
    * @param pId id del rol
    * @return nulo si no encuentra nada.
    */
   public com.trascender.framework.recurso.persistent.Rol getRolById( long pId ) 
      throws java.rmi.RemoteException, TrascenderException;

   /**
    * Recupera una lista de permisos del rol en conjunto con todos los permisos que a√∫n no han sido asignados
    * @param pRol rol por el cual se desea filtrar
    * @return lista de permisos
    */
   public java.util.List getListaPermisosPorRol( com.trascender.framework.recurso.persistent.Rol pRol )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

}
