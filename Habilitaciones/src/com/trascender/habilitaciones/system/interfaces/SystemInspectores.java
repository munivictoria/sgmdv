/*
 * Generated by XDoclet - Do not edit!
 */
package com.trascender.habilitaciones.system.interfaces;

import javax.ejb.Remote;

import com.trascender.habilitaciones.recurso.filtros.FiltroInspector;
import com.trascender.habilitaciones.recurso.persistent.shps.Inspector;

@Remote
public interface SystemInspectores {
	
	public static final String JNDI_NAME = "ejb/SystemInspectores/remote";
	
   /**
    * Agrega un inspector a la base de datos
    * @param pInspector
    * @throws TrascenderException
    */
   public void addInspector( com.trascender.habilitaciones.recurso.persistent.shps.Inspector pInspector )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Actualiza los datos de un inspector
    * @param pInspector inspector a actualizar
    * @throws TrascenderException
    */
   public void updateInspector( com.trascender.habilitaciones.recurso.persistent.shps.Inspector pInspector )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Elimina un inspector del registro
    * @param pInspector inspector a eliminar
    * @throws TrascenderException
    */
   public void deleteInspector( com.trascender.habilitaciones.recurso.persistent.shps.Inspector pInspector )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Recupera un listado de inspectores
    * @param pNombre nombre del inspector
    * @param pPersonaFisica persona f√≠sica que puede llegar a ser inspector
    * @return Listado de inspectores
    * @throws TrascenderException
    */
   public FiltroInspector findListaInspectores(FiltroInspector pFiltro)
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   public Inspector getInspectorPorId(long pId) throws Exception;
   
   /**
    * Setea la llave del ejb
    * @param pLlave llave
    */
   public void setLlave( long pLlave )
      throws java.rmi.RemoteException;

}
