/*
 * Generated by XDoclet - Do not edit!
 */
package com.trascender.habilitaciones.system.interfaces;

import java.rmi.RemoteException;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.ejb.Remote;

import org.hibernate.TransactionException;

import com.trascender.framework.exception.TrascenderException;
import com.trascender.habilitaciones.exception.HabilitacionesException;
import com.trascender.habilitaciones.recurso.filtros.FiltroPlan;
import com.trascender.habilitaciones.recurso.filtros.FiltroTipoParametroConstante;
import com.trascender.habilitaciones.recurso.filtros.FiltroTipoParametroGrilla;
import com.trascender.habilitaciones.recurso.filtros.FiltroTipoParametroGrupoZona;
import com.trascender.habilitaciones.recurso.filtros.FiltroTipoTasa;
import com.trascender.habilitaciones.recurso.persistent.Plan;
import com.trascender.habilitaciones.recurso.persistent.TipoObligacion;
import com.trascender.habilitaciones.recurso.persistent.TipoParametroAlicuota;
import com.trascender.habilitaciones.recurso.persistent.TipoParametroConstante;
import com.trascender.habilitaciones.recurso.persistent.TipoParametroDinamico;
import com.trascender.habilitaciones.recurso.persistent.TipoParametroGrupoZona;
import com.trascender.habilitaciones.recurso.persistent.TipoTasa;
import com.trascender.habilitaciones.recurso.persistent.tipoParametroGrilla.TipoParametroGrilla;

@Remote
public interface SystemTipoTasa {
	
	public static final String JNDI_NAME = "ejb/SystemTipoTasa/remote";
	
   /**
    * Agrega una constante a los tipos de parámetros para poder ser utilizada en las fórmulas
    * @param pTipoParametroConstante Tipo de parámetro constante a agregar
    * @return TipoParametroConstante actualizado
    */
   public TipoParametroConstante addTipoParametroConstante( TipoParametroConstante pTipoParametroConstante ) throws TrascenderException, RemoteException;

   /**
    * Agrega un tipo de parámetro de grupos de zonas
    * @param pTipoParametroGrupoZona
    * @return 
    * @throws TrascenderException
    */
   public TipoParametroGrupoZona addTipoParametroGrupoZona( TipoParametroGrupoZona pTipoParametroGrupoZona ) throws TrascenderException, RemoteException;

   public List getListaTiposParametrosParcelarios(  ) throws TrascenderException, RemoteException;

   /**
    * Recupera un listado de los parámetos constantes
    * @param pNombre
    * @return 
    * @throws TrascenderException
    */
   public FiltroTipoParametroConstante findListaParametrosConstantes(FiltroTipoParametroConstante pFiltro) throws TrascenderException, RemoteException;

   public FiltroTipoParametroGrupoZona findListaTipoParametroGrupoZona(FiltroTipoParametroGrupoZona pFiltro)  throws TrascenderException,RemoteException;

   /**
    * Recupera el listado de parámetros de obra
    * @return 
    * @throws TrascenderException
    */
   public List getListaTiposParametrosObra(  ) throws TrascenderException, RemoteException;

   public void validarFormula( TipoTasa pTipoTasa ) throws TrascenderException, RemoteException;

   /**
    * Agrega un tipo de tasa
    * @param pTipoTasa
    * @return 
    * @throws TrascenderException
    */
   public TipoTasa addTipoTasa( TipoTasa pTipoTasa ) throws TrascenderException, RemoteException;

   /**
    * Recupera un listado de tipos de tasa
    * @param pNombre Nombre del tipo de tasa
    * @param pTipoObligacion tipo de obligacion a la que pertenece
    * @param pPeriodicidad periodicidad del tipo de tasa
    * @param pEstado estado en que se encuentra el tipo de tasa
    * @return 
    * @throws TrascenderException
    */
   public FiltroTipoTasa findListaTiposTasa(FiltroTipoTasa pFiltro) throws TrascenderException, RemoteException;

   /**
    * Actualiza los datos de un tipo de tasa
    * @param pTipoTasa
    * @return 
    * @throws TrascenderException
    */
   public TipoTasa updateTipoTasa(TipoTasa pTipoTasa ) throws TrascenderException, RemoteException;

   /**
    * Recupera un tipo de tasa con todos los datos asociados
    * @param pId
    * @return 
    * @throws TrascenderException
    */
   public TipoTasa getTipoTasaPorId( long pId ) throws TrascenderException, RemoteException;

   /**
    * Recupera el listado de tipos de parámetros de personas
    * @return 
    * @throws TrascenderException
    */
   public List getListaTiposParametrosPersonas(  ) throws TrascenderException,RemoteException;

   /**
    * Recupera el listado de parámetros de alicuota
    * @return 
    * @throws TrascenderException
    */
   public List getListaTiposParametrosOSP(  ) throws TrascenderException, RemoteException;

   public List<TipoParametroAlicuota> getListaParametrosAlicuotaOSP() throws TrascenderException;
   
   /**
    * Actualiza los datos de un tipo de parámetro constante
    * @param pTipoParametroConstante
    * @return 
    * @throws TrascenderException
    */
   public TipoParametroConstante updateTipoParametroConstante( TipoParametroConstante pTipoParametroConstante )
      throws TrascenderException, RemoteException;

   /**
    * Actualiza los datos de un tipo de parámetro de grupos de zonas
    * @param pTipoParametroGrupoZona
    * @return 
    * @throws TrascenderException
    */
   public TipoParametroGrupoZona updateTipoParametroGrupoZona( TipoParametroGrupoZona pTipoParametroGrupoZona )
      throws TrascenderException, RemoteException;

   public List getListaTiposParametrosSHPS(  ) throws TrascenderException;
   
   public List<TipoParametroAlicuota> getListaParametrosAlicuotaSHPS() throws TrascenderException;

   /**
    * Elimina un tipo de parámetro constante
    * @param pTipoParametroConstante
    * @throws TrascenderException
    */
   public void deleteTipoParametroConstante( TipoParametroConstante pTipoParametroConstante ) throws TrascenderException, RemoteException;

   /**
    * Elimina un tipo de parámetro de grupo de zona
    * @param pTipoParametroGrupoZona
    * @throws TrascenderException
    */
   public void deleteTipoParametroGrupoZona( TipoParametroGrupoZona pTipoParametroGrupoZona ) throws TrascenderException, RemoteException;

   /**
    * Recupera el tipo de parámetro de grupo de zonas por id
    * @param pId
    * @return 
    * @throws TrascenderException
    */
   public TipoParametroGrupoZona getTipoParametroGrupoZonaPorId( long pId ) throws TrascenderException, RemoteException;

   public TipoParametroConstante getTipoParametroConstantePorId( long pId ) throws TrascenderException, RemoteException;

   public List getListaTiposParametrosTGI(  ) throws TrascenderException,RemoteException;

   public List getListaTiposParametrosPFO(  ) throws TrascenderException,RemoteException;

   public List getListaTiposParametrosVencimiento(  ) throws TrascenderException,RemoteException;
   
   public List getListaTiposParametrosCementerio() throws TrascenderException,RemoteException;
   
   public List getListaTiposParametrosParcelaCementerio() throws TrascenderException,RemoteException;
   
   public List getListaTiposParametrosTipoSepultura() throws TrascenderException,RemoteException;
   
//   public List getListaTiposParametrosTipoSepultura() throws TrascenderException,RemoteException;
   
   public List getListaTiposParametrosAutomotor() throws TrascenderException,RemoteException;
   
   public List getListaTiposParametrosVehiculo() throws TrascenderException,RemoteException;

   public void activarTipoTasa( TipoTasa pTipoTasa,String pComentario ) throws TrascenderException,RemoteException;

   public Double calcularTasa( TipoTasa pTipoTasa,Map pListaValores ) throws TrascenderException, RemoteException;
   
   public Double calcularTasaAlicuota(TipoTasa pTipoTasa, Map pListaValores) throws Exception;

   public Map calcularModificadoresSobreTasa( TipoTasa pTipoTasa,Map valores ) throws TrascenderException,RemoteException;

   public Map calcularVencimientos( Date pFechaLiquidacion,Date pFechaCobro,TipoTasa pTipoTasa,Map pValores ) throws TrascenderException, RemoteException;

   public Map calcularModificadoresSobreSubtotal( TipoTasa pTipoTasa,Map pValores ) throws TrascenderException, RemoteException;

   public List getListaTiposParametrosDeuda() throws Exception;
   
   /**
    * Calcula el interés y el recargo de un tipo tasa
    * @param pFechaLiquidacion
    * @param pFechaCobro
    * @param pTipoTasa
    * @param pValores
    * @return
    * @throws TrascenderException
    * @throws RemoteException
    */
   public Map<String,Double> calcularIntereses(Date pFechaLiquidacion,Date pFechaCobro,TipoTasa pTipoTasa,Map<String,Double> pValores) throws TrascenderException, RemoteException;
   
   public void setLlave( long pLlave ) throws RemoteException;
   
   public List<TipoObligacion> findListaTipoObligacion(String pNombre, Boolean pEsTipoTasaMenor) throws TrascenderException;

   public List<TipoParametroDinamico> getListaParametrosDinamicos(TipoObligacion pTipo)	throws TrascenderException;
   
   public void deleteTipoTasa(TipoTasa pTipoTasa) throws TrascenderException;
   
   public void addPlan(Plan pPlan) throws TrascenderException;
	
   public void updatePlan(Plan pPlan) throws TrascenderException;
	
   public void deletePlan(Plan pPlan) throws TrascenderException;
	
   public FiltroPlan findListaPlan(FiltroPlan pFiltro) throws TrascenderException;

   public Plan getPlanPorId(long pId) throws Exception;
   
   public void addTipoParametroGrilla(TipoParametroGrilla pTipoParametro) throws TrascenderException;
	
	public void updateTipoParametroGrilla(TipoParametroGrilla pTipoParametro) throws TrascenderException;
	
	public void deleteTipoParametroGrilla(TipoParametroGrilla pTipoParametro) throws TrascenderException;
	
	public FiltroTipoParametroGrilla findListaTipoParametroGrilla(FiltroTipoParametroGrilla pFiltro) throws TrascenderException;
	
	public TipoParametroGrilla getTipoParametroGrillaPorId(Long pId) throws TrascenderException;
}
