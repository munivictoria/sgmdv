/*
 * Generated by XDoclet - Do not edit!
 */
package com.trascender.habilitaciones.business.interfaces;

import javax.ejb.Local;

import com.trascender.habilitaciones.recurso.filtros.FiltroInspector;
import com.trascender.habilitaciones.recurso.filtros.FiltroLibretaSanitaria;
import com.trascender.habilitaciones.recurso.filtros.FiltroLocalComercial;
import com.trascender.habilitaciones.recurso.filtros.FiltroObligacionSHPS;
import com.trascender.habilitaciones.recurso.filtros.FiltroTransporteVehicular;
import com.trascender.habilitaciones.recurso.persistent.shps.Inspector;

/**
 * Local interface for BusinessDocumentoSHPS.
 */
@Local
public interface BusinessDocumentoSHPSLocal {
	
	public static final String JNDI_NAME = "ejb/BusinessDocumentoSHPSLocal/local";
	
   /**
    * Recupera la lista de documentos especializados de SHPS de una persona
    * @param pPersona pPersona
    * @return listado de documentos especializados
    * @throws Exception
    */
   public java.util.List findListaDocumentosSHPS( com.trascender.framework.recurso.persistent.Persona pPersona ) throws java.lang.Exception;

   /**
    * Actualiza los datos de un documento de shps
    * @param pDocumentoSHPS documento a actualizar
    * @throws Exception
    */
   public void updateDocumentoSHPS( com.trascender.habilitaciones.recurso.persistent.shps.DocumentoSHPS pDocumentoSHPS ) throws java.lang.Exception;

   public Integer getNroInscripcionDocEspSHPS();
   
   public void addLocalComercial( com.trascender.habilitaciones.recurso.persistent.shps.LocalComercial pLocalComercial ) throws java.lang.Exception;

   /**
    * Actualiza los datos del local comercial
    * @param pLocalComercial
    * @throws Exception
    */
   public void updateLocalComercial( com.trascender.habilitaciones.recurso.persistent.shps.LocalComercial pLocalComercial ) throws java.lang.Exception;

   public FiltroLocalComercial findListaLocalesComerciales(FiltroLocalComercial pFiltro) throws java.lang.Exception;

   public void addInspeccionComercial( com.trascender.habilitaciones.recurso.persistent.shps.InspeccionComercial pInspeccionComercial ) throws java.lang.Exception;

   public void updateInspeccionComercial( com.trascender.habilitaciones.recurso.persistent.shps.InspeccionComercial pInspeccionComercial ) throws java.lang.Exception;

   public void deleteInspeccionComercial( com.trascender.habilitaciones.recurso.persistent.shps.InspeccionComercial pInspeccionComercial ) throws java.lang.Exception;

   public java.util.List findListaInspeccionesComerciales( java.util.Date pFechaDesde,java.util.Date pFechaHasta,com.trascender.habilitaciones.recurso.persistent.shps.LocalComercial pLocalComercial,com.trascender.habilitaciones.recurso.persistent.shps.InspeccionSHPS.Estado pEstado ) throws java.lang.Exception;

   public void addInspeccionVehicular( com.trascender.habilitaciones.recurso.persistent.shps.InspeccionVehicular pInspeccionVehicular ) throws java.lang.Exception;

   public void updateInspeccionVehicular( com.trascender.habilitaciones.recurso.persistent.shps.InspeccionVehicular pInspeccionVehicular ) throws java.lang.Exception;

   public void deleteInspeccionVehicular( com.trascender.habilitaciones.recurso.persistent.shps.InspeccionVehicular pInspeccionVehicular ) throws java.lang.Exception;

   /**
    * Recupera un listado de inspecciones vehiculares
    * @param fechaDesde
    * @param fechaHasta
    * @param pTransporteVehicular vehiculo al que pertenece la inspección
    * @param pEstado estado de la inspección
    * @return Listado de inspecciones vehiculares que cumplen con los requisitos
    * @throws Exception
    */
   public java.util.List findListaInspeccionesVehiculares( java.util.Date pFechaDesde,java.util.Date pFechaHasta,com.trascender.habilitaciones.recurso.persistent.shps.TransporteVehicular pTransporteVehicular,com.trascender.habilitaciones.recurso.persistent.shps.InspeccionSHPS.Estado pEstado ) throws java.lang.Exception;

   public void addLibretaSanitaria( com.trascender.habilitaciones.recurso.persistent.shps.LibretaSanitaria pLibretaSanitaria ) throws java.lang.Exception;

   public void updateLibretaSanitaria( com.trascender.habilitaciones.recurso.persistent.shps.LibretaSanitaria pLibretaSanitaria ) throws java.lang.Exception;

   public void deleteLibretaSanitaria( com.trascender.habilitaciones.recurso.persistent.shps.LibretaSanitaria pLibretaSanitaria ) throws java.lang.Exception;

   public FiltroLibretaSanitaria findListaLibretasSanitarias(FiltroLibretaSanitaria pFiltro) throws java.lang.Exception;

   /**
    * Agrega un transporte vehicular nuevo
    * @param pTransporteVehicular
    * @throws Exception
    */
   public void addTransporteVehicular( com.trascender.habilitaciones.recurso.persistent.shps.TransporteVehicular pTransporteVehicular ) throws java.lang.Exception;

   /**
    * Actualiza en la base de datos un transporte vehicular
    * @param pTransporteVehicular
    * @throws Exception
    */
   public void updateTransporteVehicular( com.trascender.habilitaciones.recurso.persistent.shps.TransporteVehicular pTransporteVehicular ) throws java.lang.Exception;

   /**
    * Da de baja un transporte vehicular
    * @param pTransporteVehicular
    * @throws Exception
    */
   public void deleteTransporteVehicular( com.trascender.habilitaciones.recurso.persistent.shps.TransporteVehicular pTransporteVehicular ) throws java.lang.Exception;

   /**
    * Da de baja un local comercial
    * @param pLocalComercial
    * @throws Exception
    */
   public void deleteLocalComercial( com.trascender.habilitaciones.recurso.persistent.shps.LocalComercial pLocalComercial ) throws java.lang.Exception;

   /**
    * Crea un nuevo tranporte vehicular a partir del anterior dado de baja, para mantener histórico
    * @param pTransporteVehicular Transporte vehicular a agregar
    * @throws Exception
    */
   public com.trascender.habilitaciones.recurso.persistent.shps.TransporteVehicular restoreTransporteVehicular( com.trascender.habilitaciones.recurso.persistent.shps.TransporteVehicular pTransporteVehicular ) throws java.lang.Exception;

   public FiltroTransporteVehicular findListaTransportesVehiculares(FiltroTransporteVehicular pFiltro) throws java.lang.Exception;

   public com.trascender.habilitaciones.recurso.persistent.shps.DocumentoSHPS getDocumentoHabilitanteSHPS( com.trascender.habilitaciones.recurso.persistent.Obligacion pObligacion ) throws java.lang.Exception;

   /**
    * Recupera una libreta sanitaria por el id
    * @param pId id de la libreta sanitaria
    * @return 
    * @throws Exception
    */
   public com.trascender.habilitaciones.recurso.persistent.shps.LibretaSanitaria getLibretaSanitariaPorId( long pId ) throws java.lang.Exception;

   /**
    * Agrega un inspector al sistema
    * @param pInspector
    * @throws Exception
    */
   public void addInspector( com.trascender.habilitaciones.recurso.persistent.shps.Inspector pInspector ) throws java.lang.Exception;

   /**
    * Actualiza un inspector
    * @param pInspector
    * @throws Exception
    */
   public void updateInspector( com.trascender.habilitaciones.recurso.persistent.shps.Inspector pInspector ) throws java.lang.Exception;

   /**
    * Intenta eliminar físicamente un inspector, en caso que no tenga ninguna inspección relacionada
    * @param pInspector inspector asociado
    * @throws Exception
    */
   public void deleteInspector( com.trascender.habilitaciones.recurso.persistent.shps.Inspector pInspector ) throws java.lang.Exception;

   public Inspector getInspectorPorId(long pId) throws Exception;
   
   /**
    * Recupera un listado de inspectores
    * @param pPersonaFisica persona fisica que puede ser o no un inspector
    * @return listado de inpectores que cumplen con los requisistos ingresados
    * @throws Exception
    */
   public FiltroInspector findListaInspectores(FiltroInspector pFiltro) throws java.lang.Exception;

   public com.trascender.habilitaciones.recurso.persistent.shps.ClausuraSHPS addClausuraSHPS( com.trascender.habilitaciones.recurso.persistent.shps.ClausuraSHPS pClausuraSHPS ) throws java.lang.Exception;

   /**
    * Actualiza los datos de una clausura y de esa manera ejecuta la actualización de la obligacion (verifica los estados)
    * @param pClausuraSHPS
    * @return 
    * @throws Exception
    */
   public com.trascender.habilitaciones.recurso.persistent.shps.ClausuraSHPS updateClausuraSHPS( com.trascender.habilitaciones.recurso.persistent.shps.ClausuraSHPS pClausuraSHPS ) throws java.lang.Exception;

   /**
    * Recupera un listado de clausuras
    * @param pFechaAltaDesde fecha de alta desde la cual filtrar el listado
    * @param pFechaAltaHasta fecha de alta hasta la cual filtrar el listado
    * @param pFechaBajaDesde fecha de baja desde la cual filtrar el listado
    * @param pFechaBajaHasta fecha de baja hasta la cual filtrar el listado
    * @param isActiva si la clausura se encuentra activa o no
    * @param pDocumentoSHPS documento al que pertenecen las clausuras
    * @return Listado de clausuras
    * @throws Exception
    */
   public java.util.List findListaClausurasSHPS( java.util.Date pFechaAltaDesde,java.util.Date pFechaAltaHasta,java.util.Date pFechaBajaDesde,java.util.Date pFechaBajaHasta,java.lang.Boolean isActiva,com.trascender.habilitaciones.recurso.persistent.shps.DocumentoSHPS pDocumentoSHPS ) throws java.lang.Exception;

   public com.trascender.habilitaciones.recurso.persistent.shps.TransporteVehicular getTransporteVehicularPorId( long pId ) throws java.lang.Exception;

   public com.trascender.habilitaciones.recurso.persistent.shps.LocalComercial getLocalComercialPorId( long pId ) throws java.lang.Exception;

   public com.trascender.framework.recurso.persistent.FirmaPermiso firmarClausura( com.trascender.framework.recurso.persistent.Usuario pUsuario,com.trascender.habilitaciones.recurso.persistent.shps.ClausuraSHPS pClausura,java.lang.String pComentario ) throws java.lang.Exception;

   /**
    * Listado de las clausuras por usuario
    * @param pUsuario
    * @param pEstado
    * @return 
    * @throws Exception
    */
   public java.util.List findListaClausurasPorUsuario( com.trascender.framework.recurso.persistent.Usuario pUsuario,java.lang.Boolean pEstado ) throws java.lang.Exception;

   /**
    * Listado de las clausuras por usuario
    * @param pPersona
    * @return 
    * @throws Exception
    */
   public java.util.List findListaClausurasPorUsuario( com.trascender.framework.recurso.persistent.Usuario pUsuario ) throws java.lang.Exception;

   public FiltroObligacionSHPS findListaObligacionesSHPS(FiltroObligacionSHPS pFiltro) throws java.lang.Exception;

}
