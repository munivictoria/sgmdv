/*
 * Generated by XDoclet - Do not edit!
 */
package com.trascender.catastro.system.interfaces;

import java.rmi.RemoteException;

import javax.ejb.Remote;

import com.trascender.catastro.recurso.filtros.FiltroCalle;
import com.trascender.catastro.recurso.filtros.FiltroCuadra;
import com.trascender.catastro.recurso.filtros.FiltroManzana;
import com.trascender.catastro.recurso.filtros.FiltroTipoCalle;
import com.trascender.catastro.recurso.persistent.Calle;
import com.trascender.catastro.recurso.persistent.TipoCalle;
import com.trascender.framework.exception.TrascenderException;

/**
 * Remote interface for SystemInformacionGeografica.
 */
@Remote
public interface SystemInformacionGeografica
{
	
	   public static final String JNDI_NAME="ejb/SystemInformacionGeografica/remote";
	   
   /**
    * Permite agregar una nueva calle
    * @throws TrascenderException
    * @param pCalle calle que se desea agregar
    */
   public com.trascender.catastro.recurso.persistent.Calle addCalle( com.trascender.catastro.recurso.persistent.Calle pCalle )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Actualiza una calle
    * @throws TrascenderException
    * @param pCalle calle que se desea actualizar
    */
   public com.trascender.catastro.recurso.persistent.Calle updateCalle( com.trascender.catastro.recurso.persistent.Calle pCalle )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Recupera una calle según el código
    * @param pCodigo código de la calle que se desea buscar
    * @return Calle que corresponde al código o nulo en caso que no exista
    * @throws TrascenderException
    */
   public com.trascender.catastro.recurso.persistent.Calle findCalle( java.lang.String pCodigo )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Obtiene un lisatado de las calles
    * @param pNombre nombre de la calle
    * @param pTipoCalle tipo de calle seg�n la cual queremos filtrar
    * @throws TrascenderException
    */
   @SuppressWarnings("unchecked")
   public FiltroCalle findListaCalles( FiltroCalle pFiltro)
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Elimina una calle
    * @param pCalle calle que se desea eliminar
    * @throws TrascenderException
    */
   public void deleteCalle( com.trascender.catastro.recurso.persistent.Calle pCalle )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Agrega un nuevo tipo de calle
    * @param pTipoCalle
    * @throws TrascenderException
    */
   public com.trascender.catastro.recurso.persistent.TipoCalle addTipoCalle( com.trascender.catastro.recurso.persistent.TipoCalle pTipoCalle )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Actualiza un tipo de calle
    * @param pTipoCalle tipo de calle que se desea actualizar
    * @throws TrascenderException
    */
   public com.trascender.catastro.recurso.persistent.TipoCalle updateTipoCalle( com.trascender.catastro.recurso.persistent.TipoCalle pTipoCalle )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Elimina un tipo de calle
    * @param pTipoCalle tipo de calle que se desea eliminar
    * @throws TrascenderException
    */
   public void deleteTipoCalle( com.trascender.catastro.recurso.persistent.TipoCalle pTipoCalle )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Realiza consultas sobre el tipo de calles
    * @param pNombre nombre del tipo de calles
    * @throws TrascenderException
    */
   @SuppressWarnings("unchecked")
   public FiltroTipoCalle findListaTipoCalles(FiltroTipoCalle filtro)
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Agrega un nuevo servicio
    * @param pServicio servicio que se desea eliminar
    * @throws TrascenderException
    */
   public com.trascender.catastro.recurso.persistent.Servicio addServicio( com.trascender.catastro.recurso.persistent.Servicio pServicio )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Actualiza un servicio
    * @param pServicio servicio que se desea actualizar
    * @throws TrascenderException
    */
   public com.trascender.catastro.recurso.persistent.Servicio updateServicio( com.trascender.catastro.recurso.persistent.Servicio pServicio )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Elimina un servicio
    * @param pServicio servicio que se desea eliminar
    * @throws TrascenderException
    */
   public void deleteServicio( com.trascender.catastro.recurso.persistent.Servicio pServicio )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Obtiene una lista de servicios
    * @param pNombre primeras letras de los nombres de servicios según los cuales se desea filtrar
    * @throws TrascenderException
    */
   @SuppressWarnings("unchecked")
   public java.util.List findListaServicios( java.lang.String pNombre )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

  
   /**
    * Agrega una manzana al sistema
    * @param pManzana manzana que se desea agregar
    * @throws TrascenderException
    */
   public com.trascender.catastro.recurso.persistent.Manzana addManzana( com.trascender.catastro.recurso.persistent.Manzana pManzana )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Actualiza los datos de una manzana
    * @param pManzana manzana a actualizar
    * @throws TrascenderException
    */
   
   public com.trascender.catastro.recurso.persistent.Manzana updateManzana( com.trascender.catastro.recurso.persistent.Manzana pManzana )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Elimina una manzana del registro
    * @param pManzana manzana que se desea eliminar
    */
   public void deleteManzana( com.trascender.catastro.recurso.persistent.Manzana pManzana )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Permite recuperar una lista de manzanas que comiencen con cierto nombre
    * @param pNombre primeras letras del nombre de la manzana que desea recuperar
    * @throws TrascenderException
    */
   @SuppressWarnings("unchecked")
   public FiltroManzana findListaManzanas(FiltroManzana pFiltro )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Permite recuperar una manzana
    * @param pNumero numero de manzana que se desea recuperar
    * @throws TrascenderException
    */
   public com.trascender.catastro.recurso.persistent.Manzana findManzana( java.lang.Integer pNumero )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Agrega una cuadra al sistema
    * @param pCuadra cuadra que se desea agregar
    * @throws TrascenderException
    */
   public com.trascender.catastro.recurso.persistent.Cuadra addCuadra( com.trascender.catastro.recurso.persistent.Cuadra pCuadra )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Actualiza los datos de una cuadra
    * @param pCuadra cuadra a actualizar
    * @throws TrascenderException
    */
   public com.trascender.catastro.recurso.persistent.Cuadra updateCuadra( com.trascender.catastro.recurso.persistent.Cuadra pCuadra )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Elimina una cuadra del registro
    * @param pCuadra cuadra a eliminar
    * @throws TrascenderException
    */
   public void deleteCuadra( com.trascender.catastro.recurso.persistent.Cuadra pCuadra )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Recupera el listado de cuadras por calle
    * @param pCalle calle por la cual se recuperar�n las cuadras
    * @param pCalleComienza calle de comienzo de la cuadra
    * @param pCalleFinaliza calle donde finaliza la cuadra
    * @param pNumeracionDesde numeraci�n de comienzo de la cuadra
    * @param pNumeracionHasta numeraci�n final de la cuadra
    * @param pEstado estado en que se encuentra la cuadra, en caso de ser valor nulo, se recuperan los registros activos
    * @throws TrascenderException
    */
   @SuppressWarnings("unchecked")
   public FiltroCuadra findListaCuadras( FiltroCuadra pFiltro)
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Recupera un listado de las cuadras por manzana que limitan una manzana
    * @param pManzana manzana relacionada
    * @return List listado de las manzanas
    */
   @SuppressWarnings("unchecked")
   public java.util.List findListaCuadrasPorManzana( com.trascender.catastro.recurso.persistent.Manzana pManzana )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Permite recuperar una calle previamente eliminada
    * @param pCalle calle que se desea restaurar
    * @throws Exception
    */
   public com.trascender.catastro.recurso.persistent.Calle restoreCalle( com.trascender.catastro.recurso.persistent.Calle pCalle )
      throws java.lang.Exception, java.rmi.RemoteException;

   /**
    * Restaura un tipo de calle eliminado con anterioridad
    * @param pTipoCalle tipo de calle eliminado
    * @throws Exception
    */
   public com.trascender.catastro.recurso.persistent.TipoCalle restoreTipoCalle( com.trascender.catastro.recurso.persistent.TipoCalle pTipoCalle )
      throws java.lang.Exception, java.rmi.RemoteException;

   /**
    * Restaura una cuadra al estado anterior al ser eliminada
    * @param pCuadra cuadra que se desea restaurar
    * @return Cuadra restaurada
    * @throws Exception
    */
   public com.trascender.catastro.recurso.persistent.Cuadra restoreCuadra( com.trascender.catastro.recurso.persistent.Cuadra pCuadra )
      throws java.lang.Exception, java.rmi.RemoteException;

   public void setLlave( long pLlave )
      throws java.rmi.RemoteException;

   public com.trascender.catastro.recurso.persistent.Manzana getManzanaPorId( long pIdManzana )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;
   
   public TipoCalle getTipoCallePorId(long pIdTipoCalle) throws RemoteException;

   public com.trascender.catastro.recurso.persistent.Cuadra getCuadraPorId( java.lang.Long pId )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;
   
   public Calle getCallePorId(Long pId) throws Exception;

}
