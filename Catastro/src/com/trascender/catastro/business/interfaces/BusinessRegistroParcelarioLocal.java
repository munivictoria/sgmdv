/*
 * Generated by XDoclet - Do not edit!
 */

package com.trascender.catastro.business.interfaces;

import java.util.List;

import javax.ejb.Local;

import com.trascender.catastro.recurso.filtros.FiltroDeclaracionJurada;
import com.trascender.catastro.recurso.filtros.FiltroParcela;
import com.trascender.catastro.recurso.filtros.FiltroPlanoConstruccion;
import com.trascender.catastro.recurso.filtros.FiltroPlanoMensura;
import com.trascender.catastro.recurso.filtros.FiltroSubParcela;
import com.trascender.catastro.recurso.persistent.Calle;
import com.trascender.catastro.recurso.persistent.Parcela;
import com.trascender.catastro.recurso.persistent.PlanoMensura;
import com.trascender.catastro.recurso.persistent.SubParcela;
import com.trascender.framework.recurso.transients.AuxIdEntidad;

/**
 * Local interface for BusinessRegistroParcelario.
 */
@Local
public interface BusinessRegistroParcelarioLocal

{
	public static final String JNDI_NAME = "BusinessRegistroParcelarioLocal/local";

	/**
	 * Agrega una parcela
	 * 
	 * @param parcela
	 *            que se desea agregar
	 * @return pParcela parcela actualizada con el id generado
	 * @throws Exception
	 */
	public com.trascender.catastro.recurso.persistent.Parcela addParcela(com.trascender.catastro.recurso.persistent.Parcela pParcela) throws java.lang.Exception;

	/**
	 * Elimina una parcela
	 * 
	 * @param pParcela
	 *            parcela que se desea eliminar
	 */

	public void deleteParcela(com.trascender.catastro.recurso.persistent.Parcela pParcela) throws Exception;

	/**
	 * Actualiza una parcela
	 * 
	 * @param pParcela
	 *            parcela que se desea actualizar
	 * @return pParcela parcela con los datos actualizados
	 * @throws Exception
	 */
	public com.trascender.catastro.recurso.persistent.Parcela updateParcela(com.trascender.catastro.recurso.persistent.Parcela pParcela) throws java.lang.Exception;

	/**
	 * Recupera un listado de parcelas que pertenecen a una cuadra
	 * 
	 * @param pCuadra
	 *            cuadra a la que pertenecen las parcelas
	 */
	@SuppressWarnings("unchecked")
	public FiltroParcela findListaParcelas(FiltroParcela pFiltro);

	@SuppressWarnings("unchecked")
	public FiltroParcela findListaParcelasPorDomicilio(FiltroParcela pFiltro);

	/**
	 * Recupera una parcela por el id
	 * 
	 * @parma pIdParcela n?mero de identificaci?n de la parcela
	 */
	public com.trascender.catastro.recurso.persistent.Parcela getParcelaPorId(long pIdParcela);

	/**
	 * Find lista volantes catastrales
	 * 
	 * @param pNumVolanteCatastral
	 *            n?mero del volante catastral
	 * @param pParcela
	 *            parcela a al que pertenece el volante catastral
	 */
	@SuppressWarnings("unchecked")
	public java.util.List findListaVolanteCatastral(java.lang.Integer pNumVolanteCatastral, com.trascender.catastro.recurso.persistent.Parcela pParcela);

	/**
	 * Listado de planos de mensura
	 * 
	 * @param pCodigoPlanoMensura
	 *            c?digo de planos de mensura
	 * @param pParcela
	 *            parcela a la que pertenece el plano de mensura
	 * @param pFechaInscripcion
	 *            fecha de inscripcion del plano de mensura
	 */

	@SuppressWarnings("unchecked")
	public FiltroPlanoMensura findListaPlanoMensura(FiltroPlanoMensura pFiltro) throws java.lang.Exception;

	/**
	 * Recupera un listado de las declaraciones juradas
	 * 
	 * @param pCodigoDDJJ
	 *            c?digo o n?mero de la declaraci?n jurada
	 * @param pDesde
	 *            fecha desde la cual comenzar a buscar
	 * @param pHasta
	 *            fecha hasta la cual buscar
	 * @param pParcela
	 *            parcela a la que pertenece
	 */
	@SuppressWarnings("unchecked")
	public FiltroDeclaracionJurada findListaDeclaracionJurada(FiltroDeclaracionJurada pFiltro) throws java.lang.Exception;

	/**
	 * Business method
	 */
	@SuppressWarnings("unchecked")
	public java.util.List findListaRegistroMejora(com.trascender.catastro.recurso.persistent.Parcela pParcela);

	@SuppressWarnings("rawtipes")
	public FiltroSubParcela findListaSubParcela(FiltroSubParcela pFiltro) throws Exception;

	/**
	 * Recupera un listado de planos de contruccion
	 * 
	 * @param pCodigo
	 *            código del plano de construccion
	 * @param pParcela
	 *            parcela a la que pertenece el plano de contruccion
	 */
	@SuppressWarnings("unchecked")
	public FiltroPlanoConstruccion findListaPlanoConstruccion(FiltroPlanoConstruccion pFiltro) throws Exception;

	// @SuppressWarnings("unchecked")
	// public FiltroParcela findListaPlanoConstruccion(FiltroParcela pFiltro) throws Exception;

	/**
	 * Agrega una nueva declaraci?n jurada
	 * 
	 * @param pDeclaracionJurada
	 *            declaraci�n jurada a agregar
	 */
	public com.trascender.catastro.recurso.persistent.DeclaracionJurada addDeclaracionJurada(com.trascender.catastro.recurso.persistent.DeclaracionJurada pDeclaracionJurada)
			throws java.lang.Exception;

	/**
	 * Actualiza los datos de una declaraci�n jurada
	 * 
	 * @param pDeclaracionJurada
	 *            declaraci�n jurada que se desea actualizar
	 */
	public com.trascender.catastro.recurso.persistent.DeclaracionJurada updateDeclaracionJurada(com.trascender.catastro.recurso.persistent.DeclaracionJurada pDeclaracionJurada)
			throws java.lang.Exception;

	/**
	 * Agrega los datos de un Volante Catastral
	 * 
	 * @param pVolanteCatastral
	 *            datos de un Volante Catastral
	 */
	public com.trascender.catastro.recurso.persistent.VolanteCatastral addVolanteCatastral(com.trascender.catastro.recurso.persistent.VolanteCatastral pVolanteCatastral)
			throws java.lang.Exception;

	/**
	 * Business method
	 */
	public com.trascender.catastro.recurso.persistent.VolanteCatastral updateVolanteCatastral(com.trascender.catastro.recurso.persistent.VolanteCatastral pVolanteCatastral)
			throws java.lang.Exception;

	/**
	 * Business method
	 */
	public void deleteVolanteCatastral(com.trascender.catastro.recurso.persistent.VolanteCatastral pVolanteCatastral) throws java.lang.Exception;

	/**
	 * Agrega un plano de mensura al sistema
	 * 
	 * @param pPlanoMensura
	 *            plano de mensura a agregar
	 * @return plano de mensura acutalizado
	 * @throws Exception
	 */
	public com.trascender.catastro.recurso.persistent.PlanoMensura addPlanoMensura(com.trascender.catastro.recurso.persistent.PlanoMensura pPlanoMensura) throws java.lang.Exception;

	/**
	 * Actualiza los datos de un plano de mensura
	 * 
	 * @param pPlanoMensura
	 *            Plano de mensura a actualizar
	 * @return PlanoMensura actualizado
	 * @throws Exception
	 */
	public com.trascender.catastro.recurso.persistent.PlanoMensura updatePlanoMensura(com.trascender.catastro.recurso.persistent.PlanoMensura pPlanoMensura) throws java.lang.Exception;

	/**
	 * Elimina f�sicamente un plano de mensura
	 * 
	 * @param pPlanoMensura
	 *            plano de mensura a eliminar
	 * @throws Exception
	 */
	public void deletePlanoMensura(com.trascender.catastro.recurso.persistent.PlanoMensura pPlanoMensura) throws java.lang.Exception;

	/**
	 * Agrega al sistema un registro de mejora
	 * 
	 * @param pRegistroMejora
	 *            registro de mejora a agregar
	 * @return registro de mejora acutalizado
	 * @throws Exception
	 */
	public com.trascender.catastro.recurso.persistent.RegistroMejora addRegistroMejora(com.trascender.catastro.recurso.persistent.RegistroMejora pRegistroMejora)
			throws java.lang.Exception;

	/**
	 * Actualiza los datos del registro de mejora
	 * 
	 * @param pRegistroMejora
	 *            registro de mejora
	 * @return Registro de mejora actualizado
	 * @throws Exception
	 */
	public com.trascender.catastro.recurso.persistent.RegistroMejora updateRegistroMejora(com.trascender.catastro.recurso.persistent.RegistroMejora pRegistroMejora)
			throws java.lang.Exception;

	/**
	 * Realiza un a b�squeda de los registros de mejora
	 * 
	 * @param pAnioConstruccion
	 *            anio de construcci�n del registro de mejora
	 * @param pEstadoMejora
	 *            estado en que se encuentra la mejora
	 * @param pParcela
	 *            parcela a la que pertenece la mejora
	 * @param pDeclaracionJurada
	 *            declaraci�n jurada a la que pertenece la mejora
	 * @param pActivo
	 *            si no ha sido eliminado
	 * @return List listado de registros de mejoras filstrados por los par�metros ingresados
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public java.util.List findListaRegistrosMejora(java.lang.Integer pAnioConstruccion,
			com.trascender.catastro.recurso.persistent.CoeficienteDepreciacion.EstadoCoeficiente pEstadoMejora, com.trascender.catastro.recurso.persistent.Parcela pParcela,
			com.trascender.catastro.recurso.persistent.DeclaracionJurada pDeclaracionJurada, java.lang.Boolean pActivo) throws java.lang.Exception;

	@SuppressWarnings("unchecked")
	public FiltroPlanoConstruccion findListaPlanosConstruccion(FiltroPlanoConstruccion filtro) throws com.trascender.framework.exception.TrascenderException;

	// @SuppressWarnings("unchecked")
	// public FiltroParcela findListaPlanosConstruccion(FiltroParcela filtro )
	// throws com.trascender.framework.exception.TrascenderException;

	public com.trascender.catastro.recurso.persistent.PlanoConstruccion updatePlanoConstruccion(com.trascender.catastro.recurso.persistent.PlanoConstruccion pPlanoConstruccion)
			throws java.lang.Exception;

	public com.trascender.catastro.recurso.persistent.PlanoConstruccion addPlanoConstruccion(com.trascender.catastro.recurso.persistent.PlanoConstruccion pPlanoConstruccion)
			throws java.lang.Exception;

	public void deletePlanoConstruccion(com.trascender.catastro.recurso.persistent.PlanoConstruccion pPlanoConstruccion) throws java.lang.Exception;

	@SuppressWarnings("unchecked")
	public java.util.List getListaCuadrasPorParcela(com.trascender.catastro.recurso.persistent.Parcela pParcela) throws java.lang.Exception;

	@SuppressWarnings("unchecked")
	public java.util.List findListaParcelasPorCuadra(long pIdParcela) throws java.lang.Exception;

	/**
	 * Calcula el avaluo por mejoras de una parcela
	 */
	public java.lang.Double calcularAvaluoMejoras(com.trascender.catastro.recurso.persistent.Parcela pParcela) throws java.lang.Exception;

	public java.lang.Double getSuperficieMejoras(com.trascender.catastro.recurso.persistent.Parcela pParcela) throws java.lang.Exception;

	public com.trascender.catastro.recurso.persistent.VolanteCatastral generarVolanteCatastral(com.trascender.catastro.recurso.persistent.Parcela pParcela) throws java.lang.Exception;

	public PlanoMensura getPlanoMensuraPorId(long id) throws Exception;

	/**
	 * Recupera el listado de los ids de todas las parcelas de una calle
	 * 
	 * @param pCalle
	 * @return List con los números de identificación de las parcelas
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	public java.util.List findListaIdsParcelasPorCalle(com.trascender.catastro.recurso.persistent.Calle pCalle) throws java.lang.Exception;

	public Calle getCallePorId(Long pId) throws Exception;

	/**
	 * Mensura una sub-parcela es el proceso de convertir a Parcela una SubParcela
	 * 
	 * @param pSubParcela
	 * @param pPlanoMensura
	 * @throws Exception
	 */
	public Parcela mensurarSubParcela(SubParcela pSubParcela, PlanoMensura pPlanoMensura) throws Exception;

	/**
	 * Remueve una subParcela unificando el resto de las sub-parcelas restantes
	 * 
	 * @param pParcela
	 * @param pSubParcela
	 * @param pSubParcelasActualizadas
	 * @throws Exception
	 */
	public void unionSubParcelaria(Parcela pParcela, SubParcela pSubParcela) throws Exception;

	/**
	 * Sub-divide una parcela en 2 o mas sub-parcelas
	 * 
	 * @param pParcela
	 * @param pListaSubParcelas
	 * @throws Exception
	 */
	public void subParcelarParcela(Parcela pParcela, List<? extends SubParcela> pListaSubParcelas) throws Exception;

	public String getSugerenciaNumeroParcela();
	
	public Long getSugerenciaNumeroRegistro();
	
	public List<AuxIdEntidad> findListaAuxIdParcela(String cadena);
}