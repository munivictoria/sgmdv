/*
 * Generated by XDoclet - Do not edit!
 */
package com.trascender.contabilidad.system.interfaces;

import java.rmi.RemoteException;
import java.util.Date;
import java.util.List;

import javax.ejb.Remote;

import com.trascender.compras.recurso.persistent.suministros.Proveedor;
import com.trascender.contabilidad.recurso.persistent.ComprobanteRetencion;
import com.trascender.contabilidad.recurso.persistent.MovimientoCajaEgreso;
import com.trascender.contabilidad.recurso.persistent.OrdenPago;
import com.trascender.contabilidad.recurso.persistent.OrdenPagoDevolucion;
import com.trascender.contabilidad.recurso.persistent.ParametroRetencion;
import com.trascender.contabilidad.recurso.transients.CuentaCorriente;
import com.trascender.framework.exception.TrascenderException;
import com.trascender.framework.recurso.persistent.Persona;
import com.trascender.framework.recurso.transients.Periodo;

/**
 * Remote interface for SystemAdministracionEgresos.
 */

@Remote
public interface SystemAdministracionEgresos
{
	
	public static final String JNDI_NAME = "ejb/SystemAdministracionEgresos/remote";

   public void setSystemPlanillaDiaria( com.trascender.contabilidad.system.interfaces.SystemAdministracionPlanillaDiaria pSystemAdministracionPlanillaDiaria )
      throws java.rmi.RemoteException;

   public void setLlave( long llave )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pCheque
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public com.trascender.contabilidad.recurso.persistent.Cheque addCheque( com.trascender.contabilidad.recurso.persistent.Cheque pCheque )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pCheque
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public com.trascender.contabilidad.recurso.persistent.Cheque updateCheque( com.trascender.contabilidad.recurso.persistent.Cheque pCheque )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pId
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public com.trascender.contabilidad.recurso.persistent.Cheque getChequeByID( java.lang.Long pId )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pCheque
    * @throws com.trascender.framework.exception.TrascenderException    */
   public void deleteCheque( com.trascender.contabilidad.recurso.persistent.Cheque pCheque )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pNumeroCheque
    * @param pFechaEmisionDesde
    * @param pFechaEmisionHasta
    * @param pFechaPagoDesde
    * @param pFechaPagoHasta
    * @param pImporteDesde
    * @param pImporteHasta
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public java.util.List findListaCheque( java.lang.String pNumeroCheque,java.util.Date pFechaEmisionDesde,java.util.Date pFechaEmisionHasta,java.util.Date pFechaPagoDesde,java.util.Date pFechaPagoHasta,java.lang.Double pImporteDesde,java.lang.Double pImporteHasta )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pBoletaDeposito
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public com.trascender.contabilidad.recurso.persistent.BoletaDeposito addBoletaDeposito( com.trascender.contabilidad.recurso.persistent.BoletaDeposito pBoletaDeposito,com.trascender.contabilidad.recurso.persistent.Cuenta pCuenta )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pBoletaDeposito
    * @param pCuenta
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public com.trascender.contabilidad.recurso.persistent.BoletaDeposito updateBoletaDeposito( com.trascender.contabilidad.recurso.persistent.BoletaDeposito pBoletaDeposito,com.trascender.contabilidad.recurso.persistent.Cuenta pCuenta )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pId
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public com.trascender.contabilidad.recurso.persistent.BoletaDeposito getBoletaDepositoByID( java.lang.Long pId )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pBoletaDeposito
    * @throws com.trascender.framework.exception.TrascenderException    */
   public void deleteBoletaDeposito( com.trascender.contabilidad.recurso.persistent.BoletaDeposito pBoletaDeposito )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pNumeroBoleta
    * @param pImporteDesde
    * @param pImporteHasta
    * @param pFechaDesde
    * @param pFechaHasta
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public java.util.List findListaBoletaDeposito( java.lang.String pNumeroBoleta,java.lang.Double pImporteDesde,java.lang.Double pImporteHasta,java.util.Date pFechaDesde,java.util.Date pFechaHasta )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pOrdenPago
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public com.trascender.contabilidad.recurso.persistent.OrdenPago addOrdenPago( com.trascender.contabilidad.recurso.persistent.OrdenPago pOrdenPago )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
	 * Business method
	 * @param pOrdenPago
	 * @return
	 * @throws Exception
	 */
	public com.trascender.contabilidad.recurso.persistent.OrdenPago confirmarOrdenPago(com.trascender.contabilidad.recurso.persistent.OrdenPago pOrdenPago)	
	throws Exception, java.rmi.RemoteException;
	
	/**
	 * Business method
	 * @param pOrdenPago
	 * @throws Exception
	 */
	public com.trascender.contabilidad.recurso.persistent.OrdenPago cancelarOrdenPago (com.trascender.contabilidad.recurso.persistent.OrdenPago pOrdenPago)	
		throws Exception, java.rmi.RemoteException;
   /**
    * Business method
    * @param pOrdenPago
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public com.trascender.contabilidad.recurso.persistent.OrdenPago updateOrdenPago( com.trascender.contabilidad.recurso.persistent.OrdenPago pOrdenPago )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pId
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public com.trascender.contabilidad.recurso.persistent.OrdenPago getOrdenPagoByID( java.lang.Long pId )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pOrdenPago
    * @throws com.trascender.framework.exception.TrascenderException    */
   public void deleteOrdenPago( com.trascender.contabilidad.recurso.persistent.OrdenPago pOrdenPago )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
    * @param pFechaEmisionDesde
    * @param pFechaEmisionHasta
    * @param pFechaPagoDesde
    * @param pFechaPagoHasta
    * @param pImporteDesde
    * @param pImporteHasta
    * @param pProveedor
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public java.util.List findListaOrdenPago( java.util.Date pFechaEmisionDesde,java.util.Date pFechaEmisionHasta,java.util.Date pFechaPagoDesde,java.util.Date pFechaPagoHasta,java.lang.Double pImporteDesde,java.lang.Double pImporteHasta,com.trascender.compras.recurso.persistent.suministros.Proveedor pProveedor, OrdenPago.Estado pEstado)
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

   /**
    * Business method
	* @param pParametroRetencion
	* @param pPeriodo
	* @param pProveedor
	* @return
    * @throws com.trascender.framework.exception.TrascenderException    */
	public Double calcularMontoRetencion(ParametroRetencion pParametroRetencion, Periodo pPeriodo, Proveedor pProveedor)
      throws java.lang.Exception, java.rmi.RemoteException;

   /**
    * Business method
    * @param pParametroRetencion
    * @return
    * @throws java.lang.Exception    */
   public com.trascender.contabilidad.recurso.persistent.ParametroRetencion addParametroRetencion(com.trascender.contabilidad.recurso.persistent.ParametroRetencion pParametroRetencion)
	throws java.lang.Exception, java.rmi.RemoteException;

   /**
    * Business method
    * @param pParametroRetencion
    * @return
    * @throws java.lang.Exception    */
   public com.trascender.contabilidad.recurso.persistent.ParametroRetencion updateParametroRetencion(com.trascender.contabilidad.recurso.persistent.ParametroRetencion pParametroRetencion)
	throws Exception, java.rmi.RemoteException;
 
   /**
    * Business method
    * @param pParametroRetencion
    * @return
    * @throws java.lang.Exception    */
   public void deleteParametroRetencion(com.trascender.contabilidad.recurso.persistent.ParametroRetencion pParametroRetencion)
	throws Exception, java.rmi.RemoteException;
   
   /**
    * Business method
    * @param pParametroRetencion
    * @return
    * @throws java.lang.Exception    */
   public List<ParametroRetencion> findListaParametroRetencion() 
   	throws java.lang.Exception, java.rmi.RemoteException;

   /**
	 * Business method
	 * @ejb.interface-method view-type="remote"
	 * @param pComprobanteRetencion
	 * @param pProveedor
	 * @return
	 * @throws com.trascender.framework.exception.TrascenderException
	 */
	public com.trascender.contabilidad.recurso.persistent.ComprobanteRetencion addComprobanteRetencion(com.trascender.contabilidad.recurso.persistent.ComprobanteRetencion pComprobanteRetencion, com.trascender.compras.recurso.persistent.suministros.Proveedor pProveedor)
   	throws java.lang.Exception, java.rmi.RemoteException;
	
	/**
	 * Business method
	 * @ejb.interface-method view-type="remote"
	 * @param pComprobanteRetencion
	 * @return
	 * @throws com.trascender.framework.exception.TrascenderException
	 */
	public void deleteComprobanteRetencion(com.trascender.contabilidad.recurso.persistent.ComprobanteRetencion pComprobanteRetencion)
	throws java.lang.Exception, java.rmi.RemoteException;
	
   /** 
    * Business method
    * @param pPeriodo
    * @param pProveedor
    * @return
    * @throws java.lang.Exception    */
   public List<ComprobanteRetencion> findListaRetencion(Periodo pPeriodo, Proveedor pProveedor)
   	throws java.lang.Exception, java.rmi.RemoteException;
   
	/**
	 * Business method
	 * @ejb.interface-method view-type ="local"
	 * @param pId
	 * @return
	 * @throws Exception
	 */
	public com.trascender.contabilidad.recurso.persistent.ComprobanteRetencion getComprobanteRetencionByID(Long pId)
		throws java.lang.Exception, java.rmi.RemoteException;


   /** 
    * Business method
    * @param pId
    * @return
    * @throws java.lang.Exception    */
	public com.trascender.contabilidad.recurso.persistent.LineaRetencion getLineaRetencionByID(Long pId)
		throws java.lang.Exception, java.rmi.RemoteException;
   
   /**
    * Business method
    * @param pId
    * @return
    * @throws java.lang.Exception    */
	public com.trascender.contabilidad.recurso.persistent.ParametroRetencion getParametroRetencionByID(Long pId)
		throws java.lang.Exception, java.rmi.RemoteException;

   /**
    * Business method
    * @param pId
    * @return 
    * @throws com.trascender.framework.exception.TrascenderException    */
   public com.trascender.contabilidad.recurso.persistent.LineaOrdenPago getLineaOrdenPagoByID( java.lang.Long pId )
      throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;
   
   /**
    * Business method
    * @param pId
    * @return
    * @throws Exception
    * @throws RemoteException
    */
   public com.trascender.contabilidad.recurso.persistent.LineaOrdenPagoDevolucion getLineaOrdenPagoDevolucionByID(Long pId)
   		throws Exception, RemoteException;
   
   /**
	 * Business method
	 * @ejb.interface-method view-type="remote"
	 * @param pDebito
	 * @return
	 * @throws com.trascender.framework.exception.TrascenderException
	 */
	public com.trascender.contabilidad.recurso.persistent.Debito addDebito (com.trascender.contabilidad.recurso.persistent.Debito pDebito)
			throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;
			
	/**
	* Business method
	* @ejb.interface-method view-type="remote"
	* @param pDebito
	* @return
	* @throws com.trascender.framework.exception.TrascenderException
	*/
	public com.trascender.contabilidad.recurso.persistent.Debito updateDebito (com.trascender.contabilidad.recurso.persistent.Debito pDebito)
			throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;
	
					
	/**
	* Business method
	* @ejb.interface-method view-type="remote"
	* @param pDebito
	* @return
	* @throws com.trascender.framework.exception.TrascenderException
	*/
	public void deleteDebito (com.trascender.contabilidad.recurso.persistent.Debito pDebito)
			throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;
	
	/**
	 * Business method
	 * @ejb.interface-method view-type="remote"
	 * @param pId
	 * @return
	 * @throws com.trascender.framework.exception.TrascenderException
	 */
	public com.trascender.contabilidad.recurso.persistent.Debito getDebitoByID(Long pId) throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;
	
	/**
	 * Business method
	 * @ejb.interface-method view-type="remote"
	 * @param pFechaDesde
	 * @param pFechaHasta
	 * @param pImporteDesde
	 * @param pImporteHasta
	 * @return
	 * @throws com.trascender.framework.exception.TrascenderException
	 */
	public List findListaDebito(Date pFechaDesde, Date pFechaHasta, Double pImporteDesde, Double pImporteHasta) throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;
	
	/**
	 * Business method
	 * @ejb.interface-method view-type="remote"
	 * @param pFechaDesde
	 * @param pFechaHasta
	 * @param pImporteDesde
	 * @param pImporteHasta
	 * @return
	 * @throws java.lang.Exception
	 */
	public List<MovimientoCajaEgreso> findListaMovimientoCajaEgreso (Date pFechaDesde, Date pFechaHasta, Double pImporteDesde, Double pImporteHasta) throws java.lang.Exception, java.rmi.RemoteException;
	
	/**
	 * Business method
	 * @ejb.interface-method view-type="remote"
	 * @param pOrdenPago
	 * @return
	 * @throws TrascenderException
	 */
	public OrdenPagoDevolucion addOrdenPago(OrdenPagoDevolucion pOrdenPago) throws TrascenderException, RemoteException;
	
	/**
	 * Business method
	 * @ejb.interface-method view-type="remote" 
	 * @param pOrdenPago
	 * @return
	 * @throws Exception
	 */
	public void deleteOrdenPago(OrdenPagoDevolucion pOrdenPago) throws TrascenderException, RemoteException;
	
	/**
	 * Business method
	 * @ejb.interface-method view-type="remote" 
	 * @param pOrdenPago
	 * @return
	 * @throws Exception
	 */
	public OrdenPagoDevolucion updateOrdenPago(OrdenPagoDevolucion pOrdenPago) throws TrascenderException, RemoteException;
	
	/**
	 * Business method
	 * @ejb.interface-method view-type="remote"
	 * @param pId
	 * @return
	 * @throws TrascenderException
	 * @throws RemoteException
	 */
	public OrdenPagoDevolucion getOrdenPagoDevolucionByID(Long pId) throws TrascenderException, RemoteException;
	
	/**
	 * Business method
	 * @ejb.interface-method view-type="remote"
	 * @param pOrdenPagoDevolucion
	 * @return
	 * @throws TrascenderException
	 */
	public OrdenPagoDevolucion confirmarOrdenPago(OrdenPagoDevolucion pOrdenPagoDevolucion) throws TrascenderException, RemoteException;
	
	/**
	 * Business method
	 * @ejb.interface-method view-type="remote"
	 * @param pFechaEmisionDesde
	 * @param pFechaEmisionHasta
	 * @param pFechaPagoDesde
	 * @param pFechaPagoHasta
	 * @param pImporteDesde
	 * @param pImporteHasta
	 * @param pPersona
	 * @param pEstado
	 * @return
	 * @throws TrascenderException
	 * @throws RemoteException
	 */
	public List findListaOrdenPagoDev(Date pFechaEmisionDesde, Date pFechaEmisionHasta, 
			Date pFechaPagoDesde, Date pFechaPagoHasta, Double pImporteDesde, Double pImporteHasta, Persona pPersona, OrdenPago.Estado pEstado) throws TrascenderException, RemoteException;
	
	public CuentaCorriente generarCuentaCorriente(Proveedor pProveedor);
}
