/*
 * Generated by XDoclet - Do not edit!
 */

package com.trascender.saic.system.interfaces;

import java.io.File;
import java.rmi.RemoteException;
import java.util.List;
import java.util.Set;

import javax.ejb.Remote;

import com.trascender.catastro.recurso.persistent.Calle;
import com.trascender.catastro.recurso.persistent.Parcela;
import com.trascender.framework.exception.TrascenderException;
import com.trascender.framework.recurso.persistent.Persona;
import com.trascender.habilitaciones.recurso.filtros.FiltroObligacionSHPS;
import com.trascender.habilitaciones.recurso.persistent.CuotaLiquidacion;
import com.trascender.habilitaciones.recurso.persistent.Obligacion;
import com.trascender.habilitaciones.recurso.persistent.TipoObligacion;
import com.trascender.habilitaciones.recurso.persistent.cementerio.ParcelaCementerio;
import com.trascender.habilitaciones.recurso.persistent.cementerio.TipoSepultura;
import com.trascender.habilitaciones.recurso.persistent.osp.ServicioOSP;
import com.trascender.habilitaciones.recurso.persistent.pfo.Obra;
import com.trascender.habilitaciones.recurso.persistent.transito.Vehiculo;
import com.trascender.saic.exception.ResultadoLiquidacion;
import com.trascender.saic.recurso.filtros.FiltroCobroExterno;
import com.trascender.saic.recurso.filtros.FiltroLiquidacionArrendamiento;
import com.trascender.saic.recurso.filtros.FiltroLiquidacionAutomotor;
import com.trascender.saic.recurso.filtros.FiltroLiquidacionCementerio;
import com.trascender.saic.recurso.filtros.FiltroLiquidacionOSP;
import com.trascender.saic.recurso.filtros.FiltroLiquidacionPFO;
import com.trascender.saic.recurso.filtros.FiltroLiquidacionSHPS;
import com.trascender.saic.recurso.filtros.FiltroLiquidacionTGI;
import com.trascender.saic.recurso.filtros.FiltroLiquidacionTasaMenor;
import com.trascender.saic.recurso.filtros.FiltroLogLiquidacion;
import com.trascender.saic.recurso.persistent.CobroExterno;
import com.trascender.saic.recurso.persistent.CobroExterno.EntidadRecaudadora;
import com.trascender.saic.recurso.persistent.LiquidacionTasa;
import com.trascender.saic.recurso.persistent.LogLiquidacion;
import com.trascender.saic.recurso.persistent.RegistroDeuda;
import com.trascender.saic.recurso.persistent.auditoriaTributaria.AuditoriaTributaria;
import com.trascender.saic.recurso.persistent.refinanciacion.DocumentoRefinanciacion;
import com.trascender.saic.recurso.transients.HistorialPagosTasas;

@Remote
public interface SystemLiquidacionTasa {
	public static final String JNDI_NAME = "ejb/SystemLiquidacionTasa/remote";

	public void setLlave(long pLlave) throws java.rmi.RemoteException;

	/**
	 * 
	 * @param pPeriodo
	 * @return
	 * @throws com.trascender.framework.exception.TrascenderException
	 * @throws java.rmi.RemoteException
	 */
	public ResultadoLiquidacion liquidarTgi(CuotaLiquidacion[] pCuotas, Persona pPersona, Parcela pParcela, Boolean pIgnorarPlan) throws TrascenderException, RemoteException;

	public ResultadoLiquidacion liquidarSHPS(Persona pPersona, CuotaLiquidacion[] pCuotas, FiltroObligacionSHPS pFiltro, Boolean pIgnorarPlan) throws TrascenderException, RemoteException;

	/**
	 * Recupera una liquidación a partir del número de identificación
	 * 
	 * @param pId
	 * @return
	 * @throws TrascenderException
	 */
	public LiquidacionTasa getLiquidacionTasaPorId(long pId) throws TrascenderException, RemoteException;

	public FiltroLiquidacionTGI findListaLiquidacionesTGI(FiltroLiquidacionTGI pFiltro) throws TrascenderException, RemoteException;

	/**
	 * Recupera el listado de las liquidaciones de osp
	 * 
	 * @param pPersona
	 * @param pCuadra
	 * @param pServicioOSP
	 * @param pServicioMedido
	 * @param pCalle
	 * @param pPeriodo
	 * @return
	 * @throws TrascenderException
	 */
	public FiltroLiquidacionOSP findListaLiquidacionesOSP(FiltroLiquidacionOSP pFiltro) throws TrascenderException, RemoteException;

	/**
	 * Liquida la tasa de OSP
	 * 
	 * @param pServicio
	 * @param pCalle
	 * @param pPeriodo
	 * @return
	 * @throws Exception
	 */
	public ResultadoLiquidacion liquidarOSP(ServicioOSP pServicio, Calle pCalle, CuotaLiquidacion[] pCuota, Persona pPersona, Parcela pParcela, Boolean pIgnorarPlan) throws TrascenderException,
			RemoteException;

	public RegistroDeuda getRegistroDeudaPorId(Long pId) throws TrascenderException, RemoteException;

	public ResultadoLiquidacion liquidarPFO(Persona pPersona, Obra pObra, Calle pCalle, CuotaLiquidacion[] pCuota) throws TrascenderException, RemoteException;

	public ResultadoLiquidacion liquidarTasaMenor(Persona pPersona, Parcela pParcela, TipoObligacion pTipoObligacionTipoTasa, CuotaLiquidacion[] pCuotas, Boolean pIgnorarPlan)
			throws Exception;

	public FiltroLiquidacionTasaMenor findListaLiquidacionesTasaMenor(FiltroLiquidacionTasaMenor pFiltro) throws Exception;

	public FiltroLiquidacionPFO findListaLiquidacionesPFO(FiltroLiquidacionPFO pFiltro)
			throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

	public FiltroLiquidacionSHPS findListaLiquidacionesSHPS(FiltroLiquidacionSHPS pFiltro)
			throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

	/**
	 * Recupera el último vencimiento de un registro de deuda (en caso de ser una liquidación)
	 * 
	 * @param pRegistroDeuda
	 * @return
	 * @throws TrascenderException
	 *             en caso que el registro de deuda no sea una liquidación o que ya se encuentre vencida
	 */
	public com.trascender.saic.recurso.persistent.Vencimiento getVencimientoActualPorRegistroDeuda(com.trascender.saic.recurso.persistent.RegistroDeuda pRegistroDeuda)
			throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

	public void anularRegistrosDeudaSinCancelar(Obligacion pObligacion) throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

	// public java.util.List getListadoReporteTGI( com.trascender.framework.recurso.transients.Periodo
	// pPeriodo,com.trascender.framework.recurso.persistent.Persona pPersona,com.trascender.catastro.recurso.persistent.Parcela pParcela, Periodicidad
	// pPeriodicidad, Integer pNumeroCuota ,EstadoRegistroDeuda pEstadoRegistroDeuda,boolean pIgualFormaPago)
	// throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

	public DocumentoRefinanciacion getDocumentoRefinanciacion(long pIdDocGeneradorDeuda) throws TrascenderException, java.rmi.RemoteException;

	public void generarLiquidacionPruebaTGI(CuotaLiquidacion pCuota, Persona pPersona, Parcela pParcela) throws Exception, RemoteException;

	public List generarLiquidacionPruebaOSP(ServicioOSP pServicio, Calle pCalle, CuotaLiquidacion pCuota, Persona pPersona, Parcela pParcela) throws TrascenderException,
			RemoteException;

	public List generarLiquidacionPruebaSHPS(Persona pPersona, CuotaLiquidacion pCuota, FiltroObligacionSHPS pFiltro) throws TrascenderException, RemoteException;

	public List generarLiquidacionPruebaPFO(Persona pPersona, Obra pObra, Calle pCalle, CuotaLiquidacion pCuota) throws TrascenderException, RemoteException;

	public void addRefinanciacion(DocumentoRefinanciacion pDocumentoRefinanciacion, AuditoriaTributaria pAuditoriaTributaria) throws TrascenderException, RemoteException;

	public void updateRefinanciacion(DocumentoRefinanciacion pDocumentoRefinanciacion) throws com.trascender.framework.exception.TrascenderException, java.rmi.RemoteException;

	public Set calcularCuotasRefinanciacion(DocumentoRefinanciacion pDocumentoRefinanciacion) throws TrascenderException, RemoteException;

	public List<DocumentoRefinanciacion> findListaRefinanciaciones(Persona pPersona, Integer pNumeroRefinanciacion) throws Exception, RemoteException;

	public boolean comprobarObra(Obra pObra) throws Exception, RemoteException;

	public HistorialPagosTasas getHistorialPagos(Obligacion pObligacion, int pAnios);

	public void eliminarLiquidacionesFisicamente(List<LiquidacionTasa> pListaLiquidacion, String comentario) throws TrascenderException;

	public void addRegistroCancelacionManual(List<LiquidacionTasa> pListaLiquidacion, String comentario) throws TrascenderException;

	public void updateLiquidacionTasa(List<LiquidacionTasa> pLista, String comentario) throws TrascenderException;

	public void marcarImpaga(List<LiquidacionTasa> pListaLiquidacion, String comentario) throws Exception;

	public FiltroLiquidacionAutomotor findListaLiquidacionesAutomotor(FiltroLiquidacionAutomotor pFiltro) throws Exception;

	public FiltroLiquidacionCementerio findListaLiquidacionesCementerio(FiltroLiquidacionCementerio pFiltro) throws Exception;

	public List findListaDocsGeneradoresDeuda(Obligacion pObligacion);

	public ResultadoLiquidacion liquidarAutomotor(Vehiculo pVehiculo, Persona pPersona, CuotaLiquidacion pCuota) throws Exception;

	public ResultadoLiquidacion liquidarCementerio(ParcelaCementerio pParcelaCementerio, CuotaLiquidacion pCuota, Persona pPersona, TipoSepultura pTipoSepultura) throws Exception;

	public FiltroCobroExterno findListaCobroExterno(FiltroCobroExterno pFiltro) throws TrascenderException;
	
	public CobroExterno getCobroExternoById(Long pIdCobroExterno) throws Exception;
	
	public void procesarArchivoCobroExterno(File pArchivo, EntidadRecaudadora pEntidadRecaudadora) throws Exception;

	public void generarLogLiquidacion(LiquidacionTasa pLiquidacion, LogLiquidacion.Evento pEvento, String pComentario);
	
	public List<LogLiquidacion> getListaLogLiquidacion(FiltroLogLiquidacion pFiltro) throws TrascenderException;

	public LogLiquidacion getLogLiquidacionesPorId(long pId) throws TrascenderException;
	
	public FiltroLogLiquidacion findListaLogLiquidacion(FiltroLogLiquidacion pFiltro) throws TrascenderException;
	
	public FiltroLiquidacionArrendamiento findListaLiquidacionesArrendamiento(FiltroLiquidacionArrendamiento pFiltro) throws TrascenderException;
	
	public ResultadoLiquidacion liquidarArrendamiento(CuotaLiquidacion[] pCuota, Persona pPersona, Parcela pParcela, Boolean pIgnorarPlan) throws TrascenderException;
}
